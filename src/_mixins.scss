@use 'sass:math';
@use 'variables' as *;

// Grid

@mixin make-grid-columns($i: 1, $list: '.col') {
  @for $i from 1 through $grid-columns {
    $list: '#{$list}, .col-#{$i}';
  }

  #{$list} {
    position: relative;
    width: 100%;
    padding-left: math.div($grid-gutter, 2);
    padding-right: math.div($grid-gutter, 2);
  }
}

@mixin make-grid-columns-equal() {
  .col {
    flex: 1 0 0%;
  }
}

@mixin loop-grid-columns($columns) {
  @for $i from 1 through $columns {
    @if ($columns == 12) {
      .col-#{$i} {
        flex: 0 0 math.percentage(math.div($i, $columns));
        max-width: math.percentage(math.div($i, $columns));
      }

      .col-offset-#{$i} {
        margin-left: math.percentage(math.div($i, $columns));
      }
    }

    @else {
      .cols-#{$columns} > .col-#{$i} {
        flex: 0 0 math.percentage(math.div($i, $columns));
        max-width: math.percentage(math.div($i, $columns));
      }

      .cols-#{$columns} > .col-offset-#{$i} {
        margin-left: math.percentage(math.div($i, $columns));
      }
    }
  }
}

// Clearfix

@mixin clearfix() {
  &::before,
  &::after {
    content: ' '; // 1
    display: table; // 2
  }

  &::after {
    clear: both;
  }
}

// Colors

@mixin generate-colors($class-prefix, $property, $colors: $color-map) {
  @each $name, $color in $colors {
    .#{$class-prefix + '-' + $name} {
      #{$property}: $color !important;
    }
  }
}
